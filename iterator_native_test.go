// Code generated by genlib2. DO NOT EDIT.

package tensor

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_NativeVectorB(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(Bool), WithShape(6))
	it, err := NativeVectorB(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixB(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(Bool), WithShape(2, 3))
	it, err := NativeMatrixB(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorB(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(Bool), WithShape(2, 3, 4))
	it, err := Native3TensorB(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorI(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int, 0, 6)), WithShape(6))
	it, err := NativeVectorI(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixI(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixI(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorI(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorI(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorI8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int8, 0, 6)), WithShape(6))
	it, err := NativeVectorI8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixI8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int8, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixI8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorI8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int8, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorI8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorI16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int16, 0, 6)), WithShape(6))
	it, err := NativeVectorI16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixI16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int16, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixI16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorI16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int16, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorI16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorI32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int32, 0, 6)), WithShape(6))
	it, err := NativeVectorI32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixI32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int32, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixI32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorI32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int32, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorI32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorI64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int64, 0, 6)), WithShape(6))
	it, err := NativeVectorI64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixI64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int64, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixI64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorI64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Int64, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorI64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorU(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint, 0, 6)), WithShape(6))
	it, err := NativeVectorU(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixU(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixU(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorU(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorU(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorU8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint8, 0, 6)), WithShape(6))
	it, err := NativeVectorU8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixU8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint8, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixU8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorU8(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint8, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorU8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorU16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint16, 0, 6)), WithShape(6))
	it, err := NativeVectorU16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixU16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint16, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixU16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorU16(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint16, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorU16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorU32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint32, 0, 6)), WithShape(6))
	it, err := NativeVectorU32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixU32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint32, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixU32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorU32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint32, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorU32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorU64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint64, 0, 6)), WithShape(6))
	it, err := NativeVectorU64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixU64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint64, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixU64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorU64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Uint64, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorU64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorF32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float32, 0, 6)), WithShape(6))
	it, err := NativeVectorF32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixF32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float32, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixF32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorF32(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float32, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorF32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorF64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float64, 0, 6)), WithShape(6))
	it, err := NativeVectorF64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixF64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float64, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixF64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorF64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Float64, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorF64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorC64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex64, 0, 6)), WithShape(6))
	it, err := NativeVectorC64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixC64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex64, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixC64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorC64(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex64, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorC64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorC128(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex128, 0, 6)), WithShape(6))
	it, err := NativeVectorC128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixC128(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex128, 0, 6)), WithShape(2, 3))
	it, err := NativeMatrixC128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorC128(t *testing.T) {
	assert := assert.New(t)
	T := New(WithBacking(Range(Complex128, 0, 24)), WithShape(2, 3, 4))
	it, err := Native3TensorC128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_NativeVectorStr(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(String), WithShape(6))
	it, err := NativeVectorStr(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_NativeMatrixStr(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(String), WithShape(2, 3))
	it, err := NativeMatrixStr(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func TestNative3TensorStr(t *testing.T) {
	assert := assert.New(t)
	T := New(Of(String), WithShape(2, 3, 4))
	it, err := Native3TensorStr(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}
