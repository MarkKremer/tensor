// Code generated by genlib2. DO NOT EDIT.

package tensor

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNativeSelectB(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]bool
	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectB(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectB(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3))
	if x, err = NativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3))
	if x, err = NativeSelectB(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(false))
	if x, err = NativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectB(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectI(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int
	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int), WithShape(2, 3))
	if x, err = NativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int), WithShape(2, 3))
	if x, err = NativeSelectI(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int(0)))
	if x, err = NativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectI(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectI8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int8
	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI8(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3))
	if x, err = NativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3))
	if x, err = NativeSelectI8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int8(0)))
	if x, err = NativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectI8(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectI16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int16
	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI16(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3))
	if x, err = NativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3))
	if x, err = NativeSelectI16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int16(0)))
	if x, err = NativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectI16(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectI32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int32
	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3))
	if x, err = NativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3))
	if x, err = NativeSelectI32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int32(0)))
	if x, err = NativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectI32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectI64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int64
	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectI64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3))
	if x, err = NativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3))
	if x, err = NativeSelectI64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int64(0)))
	if x, err = NativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectI64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectU(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint
	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3))
	if x, err = NativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3))
	if x, err = NativeSelectU(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint(0)))
	if x, err = NativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectU(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectU8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint8
	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU8(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3))
	if x, err = NativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3))
	if x, err = NativeSelectU8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint8(0)))
	if x, err = NativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectU8(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectU16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint16
	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU16(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3))
	if x, err = NativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3))
	if x, err = NativeSelectU16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint16(0)))
	if x, err = NativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectU16(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectU32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint32
	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3))
	if x, err = NativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3))
	if x, err = NativeSelectU32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint32(0)))
	if x, err = NativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectU32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectU64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint64
	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectU64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3))
	if x, err = NativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3))
	if x, err = NativeSelectU64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint64(0)))
	if x, err = NativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectU64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectF32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]float32
	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3))
	if x, err = NativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3))
	if x, err = NativeSelectF32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(float32(0)))
	if x, err = NativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectF32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectF64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]float64
	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectF64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3))
	if x, err = NativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3))
	if x, err = NativeSelectF64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(float64(0)))
	if x, err = NativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectF64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectC64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]complex64
	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3))
	if x, err = NativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3))
	if x, err = NativeSelectC64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(complex64(0)))
	if x, err = NativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectC64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectC128(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]complex128
	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC128(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectC128(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3))
	if x, err = NativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3))
	if x, err = NativeSelectC128(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(complex128(0)))
	if x, err = NativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectC128(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestNativeSelectStr(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]string
	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectStr(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = NativeSelectStr(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(String), WithShape(2, 3))
	if x, err = NativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(String), WithShape(2, 3))
	if x, err = NativeSelectStr(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(""))
	if x, err = NativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = NativeSelectStr(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}
